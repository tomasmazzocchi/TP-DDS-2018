Punto 1.  
	+Datos de formularios web (por ejemplo googleforms)
	+De redes sociales (cotizaciones de las divisas y merval por parte de las cuentas oficiales de los bancos)
	+Obtencion de datos de BD publicas por medio de Json (Polygon y las comunas de caba por parte de la pagina del gobierno)


Punto 4. https://blog.openshift.com/best-practices-for-horizontal-application-scaling/
	+Division de la aplicacion en modulos de servicios funcionalmente relacionados que puedan ser 
mantenidos y escalados conjuntamente. La idea es tener varios componentes independientes que se comuniquen entre si
La falla de uno de los componentes no debe porque afectar al funcionamiento del sistema. Cuanto mas desacoplados
esten entre si los modulos, mayor flexibilidad se va a tener para escalar los componentes independientemente.
Al tener los modulos separados, el codigo tambien lo esta por lo que se puede tener grupos especializados de cada
modulo o componente y no necesitan procuparse por los demas componentes; esto conlleva a una facilitacion a la hora
de escalar la basedatos tambien. Se puede utilizar diferentes bases de datos para cada uno de los componentes.
	+Cache distribuida: esto ayuda a tomar los datos directamente de la memoria cache de donde se este corriendo
el proyecto en vez de utilizar querys a la base de datos o archivos del sistema que son muy lentos. Tambien, ayuda a
la escalabilidad linear el hecho de agregar mas tuplas o registros a la cache. El fin de utilizar una cache es minimizar
la cantidad de trabajo que el sistema realiza y hacer que el mismo responda mas rapido ante cada peticion de los datos.
	+La utilizacion de "Entradas-Salidas No Bloqueantes" permite a los programadores obtener gran perfomance en el 
procesamiento de los datos y brinda una mejor escalabilidad. Las IO no bloqueantes se pueden implementar por medio del
paquete de java NIO permitiendo acercarnos al manejo del sistema operativo. Este feature permite tener multiples conecciones
HTTP manejadas por un unico hilo; lo unico que me limita la cantidad de conecciones es la cantidad de memoria disponible
para el stack.
	+No almacenar Estados en el nivel de la aplicacion: almacenar estados conlleva mucho espacio y cuidado. Si es 
necesario realizar uno el mismo debe ser hecho en la base de datos para que cada sesion pueda tener acceso al mismo.
	+Paralelizar las tareas: esto es posible mediante la utilizacion de hilos, java nos brinda la posibilidad de realizar
Fork/Join mediante un framework para poder tener "multiprocesamiento". La idea es utilizar la mayor cantidad de hilos con 
tareas que puedan ser ejecutadas en paralelo para poder incrementar la performance del sistema
